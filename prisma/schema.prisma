// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // CRM Relations
  contacts      Contact[]
  leads         Lead[]
  deals         Deal[]
  templates     Template[]
  toneEmbeddings ToneEmbedding[]
  
  // Chat Relations
  chatSessions  ChatSession[]
  chatMessages  ChatMessage[]
  memories      Memory[]
  emailThreadCaches EmailThreadCache[]
  emailLogs     EmailLog[]
  smartReplies  SmartReply[]
  notifications Notification[]
  eventSuggestions EventSuggestion[]
  
  // Gmail Relations
  messages      Message[]
  
  // Agent Runtime
  autonomyPolicies AutonomyPolicy[]
  tasks            Task[]
  interactions     Interaction[]
  userProfile      UserProfile?
  emailThreads     EmailThread[]
  emailMessages    EmailMessage[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  activities    Activity[]
}

// Gmail Message Model
model Message {
  id           String   @id @default(cuid())
  gmailId      String   @unique
  threadId     String
  userId       String
  from         String
  subject      String
  snippet      String
  internalDate DateTime
  labels       String[]
  payload      Json?
  createdAt    DateTime @default(now())
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  smartReplies SmartReply[]
  eventSuggestions EventSuggestion[]
  
  @@index([userId, internalDate])
  @@index([threadId])
}

// Chat Models
model ChatSession {
  id        String   @id @default(cuid())
  userId    String
  title     String?
  createdAt DateTime @default(now())
  messages  ChatMessage[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt])
}

model ChatMessage {
  id         String   @id @default(cuid())
  sessionId  String
  userId     String
  role       String   // "user" | "assistant" | "tool"
  content    String   // plain or HTML
  createdAt  DateTime @default(now())
  session    ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([sessionId, createdAt])
}

model Memory {
  id        String   @id @default(cuid())
  userId    String
  key       String   // e.g., "tone", "client:john-smith:notes"
  value     String
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, key])
}

model EmailThreadCache {
  id        String   @id
  userId    String
  snippet   String?
  payload   Bytes?   // raw gzip'd JSON if needed
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, updatedAt])
}

model EmailLog {
  id        String   @id @default(cuid())
  userId    String
  messageId String   // Gmail message ID
  threadId  String   // Gmail thread ID
  action    String   // "SENT", "DRAFTED", "FAILED"
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, timestamp])
  @@index([messageId])
}

// Real-estate Inbox models
model EmailThread {
  id           String        @id                 // provider threadId
  userId       String
  subject      String?
  lastSyncedAt DateTime      @default(now())
  dealId       String?
  messages     EmailMessage[]

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  deal         Deal?         @relation(fields: [dealId], references: [id])

  @@index([userId, lastSyncedAt])
  @@index([dealId])
}

model EmailMessage {
  id           String   @id                    // provider messageId
  threadId     String
  userId       String
  from         String
  to           String[]
  cc           String[]
  date         DateTime
  snippet      String?
  bodyHtml     String?
  bodyText     String?
  internalRefs Json?
  intent       String?
  entities     Json?
  dealId       String?
  contactId    String?
  createdAt    DateTime @default(now())

  thread       EmailThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  deal         Deal?       @relation(fields: [dealId], references: [id])
  contact      Contact?    @relation(fields: [contactId], references: [id])

  @@index([userId, date])
  @@index([threadId, date])
  @@index([dealId])
}

// CRM Models
model Contact {
  id          String   @id @default(cuid())
  userId      String
  firstName   String
  lastName    String
  email       String?
  phone       String?
  company     String?
  title       String?
  notes       String?
  tags        String[]
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  leads       Lead[]
  deals       Deal[]
  dealContacts DealContact[]
  interactions Interaction[]
  emailMessages EmailMessage[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
}

model Lead {
  id          String   @id @default(cuid())
  userId      String
  contactId   String?
  title       String
  description String?
  status      String   @default("new") // new, qualified, unqualified, converted
  source      String?
  value       Float?
  notes       String?
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contact     Contact? @relation(fields: [contactId], references: [id])
  deals       Deal[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
  @@index([contactId])
}

enum DealStage {
  LEAD
  QUALIFIED
  SHOWING
  OFFER
  ESCROW
  CLOSED
  LOST
}

enum DealType {
  BUYER
  SELLER
  RENTAL
}

enum AutonomyLevel {
  SUGGEST
  ASK
  AUTO
}

enum ActivityKind {
  NOTE
  EMAIL
  SMS
  IGDM
  CALL
  MEETING
  FILE
  AI_SUMMARY
}

model DealContact {
  id        String   @id @default(cuid())
  dealId    String
  contactId String
  role      String?
  deal      Deal     @relation(fields: [dealId], references: [id])
  contact   Contact  @relation(fields: [contactId], references: [id])

  @@index([dealId])
  @@index([contactId])
}

model Activity {
  id         String       @id @default(cuid())
  dealId     String
  userId     String
  kind       ActivityKind
  channel    String?
  subject    String?
  body       String?
  meta       Json?
  occurredAt DateTime     @default(now())
  deal       Deal         @relation(fields: [dealId], references: [id])
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([dealId, occurredAt])
  @@index([userId, occurredAt])
}

model Deal {
  id          String   @id @default(cuid())
  userId      String
  contactId   String?
  leadId      String?
  title       String
  description String?
  status      String   @default("prospecting")
  value       Float?
  probability Float    @default(0)
  closeDate   DateTime?
  notes       String?

  // New fields for V2 pipeline
  stage       DealStage @default(LEAD)
  type        DealType  @default(BUYER)
  propertyAddr String?
  city        String?
  state       String?
  priceTarget Int?
  mlsId       String?
  nextAction  String?
  nextDue     DateTime?

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contact     Contact? @relation(fields: [contactId], references: [id])
  lead        Lead?    @relation(fields: [leadId], references: [id])
  contacts    DealContact[]
  activities  Activity[]
  leadPreference LeadPreference?
  interactions Interaction[]
  tasks        Task[]
  emailThreads EmailThread[]
  emailMessages EmailMessage[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([contactId])
  @@index([leadId])
  @@index([userId, stage])
}

// Agentic models
model LeadPreference {
  id           String   @id @default(cuid())
  dealId       String   @unique
  priceMin     Int?
  priceMax     Int?
  beds         Int?
  baths        Int?
  neighborhoods String?
  timeline     String?
  notes        String?
  updatedAt    DateTime @updatedAt
  deal         Deal     @relation(fields: [dealId], references: [id])
}

model AutonomyPolicy {
  id        String         @id @default(cuid())
  userId    String
  stage     DealStage
  level     AutonomyLevel  @default(SUGGEST)
  quietStart Int?
  quietEnd   Int?
  channelCaps Json?
  channels    Json? // { email: true, sms: true, ig: true }
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, stage])
}

model Task {
  id        String   @id @default(cuid())
  userId    String
  dealId    String?
  type      String
  status    String   @default("PENDING")
  payload   Json
  result    Json?
  error     String?
  runAt     DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deal      Deal?    @relation(fields: [dealId], references: [id])

  @@index([userId, runAt])
  @@index([dealId])
  @@index([status, runAt])
}

model Interaction {
  id         String   @id @default(cuid())
  userId     String
  dealId     String?
  contactId  String?
  channel    String
  direction  String
  subject    String?
  body       String?
  meta       Json?
  occurredAt DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deal       Deal?    @relation(fields: [dealId], references: [id])
  contact    Contact? @relation(fields: [contactId], references: [id])

  @@index([userId, occurredAt])
  @@index([dealId, occurredAt])
  @@index([contactId, occurredAt])
}

model UserProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  displayName String?
  styleGuide  Json?
  voice       String?
  hotwordOn   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Template {
  id          String   @id @default(cuid())
  userId      String
  name        String
  type        String   // email, sms, letter, etc.
  subject     String?
  content     String
  variables   String[] // template variables like {{firstName}}, {{company}}
  isActive    Boolean  @default(true)
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
}

model ToneEmbedding {
  id          String   @id @default(cuid())
  userId      String
  name        String   // e.g., "professional", "friendly", "formal"
  description String?
  embedding   Float[]  // vector embedding for AI tone matching
  isActive    Boolean  @default(true)
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
}

model SmartReply {
  id           String   @id @default(cuid())
  userId       String
  messageId    String
  gmailDraftId String?
  subject      String
  to           String
  body         String
  status       String   @default("suggested") // suggested | drafted | sent | dismissed
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([userId, status, createdAt])
  @@index([messageId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // e.g., smart-reply, draft, inbox
  title     String
  body      String?
  link      String?  // client route to open
  readAt    DateTime?
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, readAt])
}

model EventSuggestion {
  id           String   @id @default(cuid())
  userId       String
  messageId    String
  summary      String
  description  String?
  startISO     String
  endISO       String
  timeZone     String   @default("America/New_York")
  attendees    String[] // list of attendee emails
  location     String?
  status       String   @default("suggested") // suggested | created | dismissed
  createdEventId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([userId, status, createdAt])
  @@index([messageId])
}
